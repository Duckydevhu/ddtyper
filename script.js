// script.js - A G√©pel≈ës J√°t√©k f≈ë logik√°j√°t tartalmaz√≥ f√°jl.

// DOM elemek lek√©rdez√©se az interakci√≥hoz
const setupScreen = document.getElementById('setup-screen');
const gameContainer = document.querySelector('.game-container');
const resultsScreen = document.getElementById('results-screen');
const resultsTableBody = document.querySelector('#results-table tbody');

const playerNameInput = document.getElementById('playerName');
const wordCountInput = document.getElementById('wordCount');
const startGameBtn = document.getElementById('startGameBtn');
const newGameBtn = document.getElementById('newGameBtn');
const clearResultsBtn = document.getElementById('clearResultsBtn');

const wordDisplay = document.getElementById('word-display');
const typedTextElement = document.getElementById('typed-text');
const scoreSpan = document.getElementById('score');
const correctCountSpan = document.getElementById('correct-count');
const errorCountSpan = document.getElementById('error-count');
const keyboardContainer = document.getElementById('keyboard');

// V√°ltoz√≥k inicializ√°l√°sa a j√°t√©k √°llapot√°nak t√°rol√°s√°hoz
let currentWordIndex = 0; // Az aktu√°lis sz√≥ indexe a list√°ban
let currentCharIndex = 0; // Az aktu√°lis karakter indexe a sz√≥ban
let score = 0; // Pontsz√°m (pontoss√°g %-ban)
let correctCount = 0; // Helyes karakterek sz√°ma
let errorCount = 0; // Hib√°s karakterek sz√°ma
let typedChars = ''; // Beg√©pelt karakterek t√°rol√°sa (jelenleg nem haszn√°lt, de j√≥ a j√∂v≈ëbeni fejleszt√©sekhez)
let gameWordCount = 20; // A j√°t√©kban felhaszn√°lt szavak sz√°ma
let shuffledWords = []; // A j√°t√©kban felhaszn√°land√≥, v√©letlenszer≈±en kiv√°lasztott szavak
let playerName = 'J√°t√©kos'; // A j√°t√©kos neve

// A virtu√°lis billenty≈±zet elrendez√©se
const keyboardLayout = [
    ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '√∂', '√º', '√≥'],
    ['q', 'w', 'e', 'r', 't', 'z', 'u', 'i', 'o', 'p', '≈ë', '√∫'],
    ['√≠', 'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', '√©', '√°', '≈±'],
    ['y', 'x', 'c', 'v', 'b', 'n', 'm', ',', '.', '-'],
    [' ']
];

// Esem√©nyfigyel≈ë a "J√°t√©k ind√≠t√°sa" gombra
startGameBtn.addEventListener('click', () => {
    // J√°t√©kos nev√©nek √©s a szavak sz√°m√°nak be√°ll√≠t√°sa
    playerName = playerNameInput.value || 'J√°t√©kos';
    gameWordCount = parseInt(wordCountInput.value) || 20;

    // Ellen≈ërz√©s, hogy van-e elegend≈ë sz√≥ a list√°ban
    if (words.length < gameWordCount) {
        alert('Nincs elegend≈ë sz√≥ a j√°t√©khoz! K√©rj√ºk, v√°lasszon kisebb sz√°mot vagy adjon hozz√° t√∂bb sz√≥t.');
        return;
    }

    // K√©perny≈ëk v√°lt√°sa: be√°ll√≠t√°sok elrejt√©se, j√°t√©k megjelen√≠t√©se
    setupScreen.style.display = 'none';
    gameContainer.style.display = 'block';
    
    // A szavak megkever√©se √©s a j√°t√©khoz sz√ºks√©ges mennyis√©g kiv√°laszt√°sa
    shuffledWords = shuffleArray(words).slice(0, gameWordCount);
    startGame();
});

// Esem√©nyfigyel≈ë az "√öj j√°t√©k" gombra az eredm√©nyek k√©perny≈ën
newGameBtn.addEventListener('click', () => {
    // Visszav√°lt√°s a be√°ll√≠t√°sok k√©perny≈ëre
    resultsScreen.style.display = 'none';
    setupScreen.style.display = 'block';
});

// Esem√©nyfigyel≈ë az "Eredm√©nyek t√∂rl√©se" gombra
clearResultsBtn.addEventListener('click', () => {
    // Helyi t√°rol√≥ban l√©v≈ë eredm√©nyek t√∂rl√©se
    localStorage.removeItem('typingGameResults');
    // A t√°bl√°zat tartalm√°nak t√∂rl√©se
    resultsTableBody.innerHTML = '';
    alert('Eredm√©nyek t√∂r√∂lve!');
    // √úres eredm√©nyt√°bla megjelen√≠t√©se
    displayResults([]);
});


// A j√°t√©k elind√≠t√°sa (√°llapot inicializ√°l√°sa)
function startGame() {
    currentWordIndex = 0;
    score = 0;
    correctCount = 0;
    errorCount = 0;
    updateStatus(); // St√°tusz s√°v friss√≠t√©se
    nextWord(); // Az els≈ë sz√≥ bet√∂lt√©se
}

// K√∂vetkez≈ë sz√≥ bet√∂lt√©se a j√°t√©khoz
function nextWord() {
    // Ellen≈ërz√©s, hogy van-e m√©g sz√≥ a list√°ban
    if (currentWordIndex >= shuffledWords.length) {
        endGame(); // Ha elfogytak a szavak, a j√°t√©k v√©ge
        return;
    }
    
    // A k√∂vetkez≈ë sz√≥ be√°ll√≠t√°sa
    const currentWord = shuffledWords[currentWordIndex];
    // A kijelz≈ëk √ºr√≠t√©se
    wordDisplay.innerHTML = '';
    typedChars = '';
    typedTextElement.innerHTML = '';
    
    // A beg√©pelend≈ë sz√≥ karaktereinek kirajzol√°sa span-ekbe
    for (const char of currentWord) {
        const charSpan = document.createElement('span');
        charSpan.textContent = char;
        charSpan.className = 'char';
        wordDisplay.appendChild(charSpan);

        const placeholderCharSpan = document.createElement('span');
        placeholderCharSpan.textContent = '';
        placeholderCharSpan.className = 'typed-char';
        typedTextElement.appendChild(placeholderCharSpan);
    }
    
    currentCharIndex = 0; // A karakter index√©nek alaphelyzetbe √°ll√≠t√°sa
    highlightNextChar(); // Az els≈ë karakter kiemel√©se
}

// A j√°t√©k befejez√©se √©s az eredm√©nyek ment√©se/megjelen√≠t√©se
function endGame() {
    // Eredm√©nyek lek√©r√©se a helyi t√°rol√≥b√≥l, vagy √ºres t√∂mb, ha nincs m√©g
    const results = JSON.parse(localStorage.getItem('typingGameResults')) || [];
    
    // Pontoss√°g kisz√°m√≠t√°sa
    const totalTyped = correctCount + errorCount;
    const accuracy = totalTyped > 0 ? (correctCount / totalTyped) * 100 : 0;
    score = Math.round(accuracy);
    
    // √öj eredm√©nyobjektum l√©trehoz√°sa
    const newResult = {
        name: playerName,
        score: score,
        correct: correctCount,
        incorrect: errorCount
    };
    results.push(newResult);
    
    // Rendez√©s pontsz√°m (pontoss√°g) szerint cs√∂kken≈ë sorrendben
    results.sort((a, b) => b.score - a.score);
    
    // Az eredm√©nyek visszament√©se a helyi t√°rol√≥ba
    localStorage.setItem('typingGameResults', JSON.stringify(results));
    
    // Az eredm√©nyek megjelen√≠t√©se a k√©perny≈ën
    displayResults(results);

    // K√©perny≈ëk v√°lt√°sa: j√°t√©k elrejt√©se, eredm√©nyek megjelen√≠t√©se
    gameContainer.style.display = 'none';
    resultsScreen.style.display = 'block';
}

// Eredm√©nyek t√°bl√°zat√°nak megjelen√≠t√©se
function displayResults(results) {
    resultsTableBody.innerHTML = ''; // T√°bl√°zat t√∂rl√©se
    const medals = ['ü•á', 'ü•à', 'ü•â']; // √ârem ikonok

    // Eredm√©nyek bej√°r√°sa √©s t√°bl√°zatba illeszt√©se
    results.forEach((result, index) => {
        const row = resultsTableBody.insertRow();
        const rankCell = row.insertCell(0);
        const nameCell = row.insertCell(1);
        const scoreCell = row.insertCell(2);
        
        const rank = index + 1;
        rankCell.textContent = rank;
        
        nameCell.textContent = result.name;
        // √ârem hozz√°ad√°sa az els≈ë 3 helyezetthez
        if (rank <= 3) {
            nameCell.innerHTML = `<span class="medal">${medals[rank - 1]}</span>${result.name}`;
        }
        
        scoreCell.textContent = `${result.score}%`;
    });
}

// A k√∂vetkez≈ë beg√©pelend≈ë karakter kiemel√©se
function highlightNextChar() {
    const allChars = document.querySelectorAll('.char');
    allChars.forEach((char, index) => {
        if (index === currentCharIndex) {
            char.style.textDecoration = 'underline'; // Al√°h√∫z√°s
        } else {
            char.style.textDecoration = 'none'; // Al√°h√∫z√°s elt√°vol√≠t√°sa
        }
    });
}

// Esem√©nyfigyel≈ë a billenty≈±lenyom√°sra (keydown)
document.addEventListener('keydown', (event) => {
    // Ellen≈ërz√©s, hogy Enter billenty≈±t nyomtak-e
    if (event.key === 'Enter') {
        // Ha egy sz√≥ v√©get √©rt, Enter-rel lehet tov√°bbl√©pni
        if (currentCharIndex === shuffledWords[currentWordIndex].length) {
            // A pontsz√°m logik√°ja a sz√≥ v√©g√©n
            const wordLength = shuffledWords[currentWordIndex].length;
            const totalTyped = correctCount + errorCount;
            const correctRatio = totalTyped > 0 ? correctCount / totalTyped : 0;
            // A pontsz√°m friss√≠t√©se a sz√≥ hossz√°nak √©s pontoss√°g√°nak ar√°ny√°ban
            score += Math.round(correctRatio * wordLength * 10);
            
            currentWordIndex++; // K√∂vetkez≈ë sz√≥
            updateStatus(); // St√°tusz s√°v friss√≠t√©se
            nextWord(); // K√∂vetkez≈ë sz√≥ bet√∂lt√©se
        }
    } else {
        // Hagyom√°nyos karakter g√©pel√©se
        handleKey(event.key); // A g√©pel√©s kezel√©se
        animateKey(event.key, true); // Billenty≈± anim√°ci√≥ bekapcsol√°sa
    }
});

// Esem√©nyfigyel≈ë a billenty≈± felenged√©s√©re (keyup)
document.addEventListener('keyup', (event) => {
    animateKey(event.key, false); // Billenty≈± anim√°ci√≥ kikapcsol√°sa
});

// Billenty≈± anim√°ci√≥ (nyom√°s/felenged√©s)
function animateKey(key, isPressed) {
    const keyElement = document.querySelector(`.key[data-key="${key.toLowerCase()}"]`);
    if (keyElement) {
        if (isPressed) {
            keyElement.classList.add('key-pressed');
        } else {
            keyElement.classList.remove('key-pressed');
        }
    }
}

// Beg√©pelt karakterek kezel√©se
function handleKey(key) {
    // Kil√©p√©si felt√©telek
    if (currentWordIndex >= shuffledWords.length || key.length > 1) {
        return;
    }
    
    const currentWord = shuffledWords[currentWordIndex];
    if (currentCharIndex >= currentWord.length) {
        return;
    }

    const currentChar = currentWord[currentCharIndex];
    
    // Sz√≥k√∂z karakter kezel√©se, hogy ne lehessen a sz√≥ elej√©n sz√≥k√∂z
    if (key === ' ' && currentCharIndex === 0) {
        return;
    }
    
    // A beg√©pelt karakter elem√©nek megkeres√©se
    const typedCharElement = typedTextElement.querySelectorAll('.typed-char')[currentCharIndex];
    typedCharElement.textContent = key;

    // Helyes vagy hib√°s g√©pel√©s ellen≈ërz√©se
    if (key === currentChar) {
        const charElement = document.querySelectorAll('.char')[currentCharIndex];
        charElement.classList.add('correct');
        typedCharElement.classList.add('correct');
        
        correctCount++;
        currentCharIndex++;
    } else {
        const charElement = document.querySelectorAll('.char')[currentCharIndex];
        charElement.classList.add('incorrect');
        typedCharElement.classList.add('incorrect');

        errorCount++;
        currentCharIndex++;
    }
    
    highlightNextChar(); // A k√∂vetkez≈ë karakter kiemel√©se
    updateStatus(); // St√°tusz s√°v friss√≠t√©se
}

// St√°tusz s√°v friss√≠t√©se (pontsz√°m, helyes/hib√°s)
function updateStatus() {
    const totalTyped = correctCount + errorCount;
    const accuracy = totalTyped > 0 ? (correctCount / totalTyped) * 100 : 0;
    score = Math.round(accuracy);
    
    scoreSpan.textContent = `${score}%`;
    correctCountSpan.textContent = correctCount;
    errorCountSpan.textContent = errorCount;
}

// Seg√©d f√ºggv√©ny: t√∂mb elemeinek v√©letlenszer≈± megkever√©se (Fisher-Yates algoritmus)
function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

// A virtu√°lis billenty≈±zet l√©trehoz√°sa a DOM-ban
function createKeyboard() {
    for (const row of keyboardLayout) {
        const rowDiv = document.createElement('div');
        rowDiv.className = 'keyboard-row';
        for (const keyChar of row) {
            const keyDiv = document.createElement('div');
            keyDiv.className = 'key';
            // "Space" felirat a sz√≥k√∂z billenty≈±re
            keyDiv.textContent = keyChar === ' ' ? 'Space' : keyChar;
            // "data-key" attrib√∫tum a billenty≈± azonos√≠t√°s√°ra
            keyDiv.setAttribute('data-key', keyChar);
            if (keyChar === ' ') {
                keyDiv.classList.add('space-key');
            }
            // Esem√©nyfigyel≈ë kattint√°sra (mobil vagy eg√©r eset√©n)
            keyDiv.addEventListener('click', () => {
                handleKey(keyChar);
            });
            rowDiv.appendChild(keyDiv);
        }
        keyboardContainer.appendChild(rowDiv);
    }
}

// Billenty≈±zet l√©trehoz√°s√°nak ind√≠t√°sa
createKeyboard();